/*
Copyright (C) 2023 tr1llkilla
    This program comes with ABSOLUTELY NO WARRANTY.
    This is free software, and you are welcome to redistribute it
    under legal conditions.
Author:
tr1llkilla

Author's note:
This program is unfinished, but does the trick to get the job done manually
Feel free to credit this work in any future registry forensic or data analysis works!
*/

#include <iostream>
#include <vector>
#include <windows.h>

struct FileSystemEntry {
    std::string name;
    std::string type;
    std::string parentDirectory;
    DWORD sizeKB;
    FILETIME creationTime;
    FILETIME lastAccessTime;
    FILETIME lastWriteTime;
};

void listFiles(const std::string& directory, std::vector<FileSystemEntry>& entries) {
    WIN32_FIND_DATAA findData;
    HANDLE hFind = FindFirstFileA((directory + "\\*").c_str(), &findData);

    if (hFind != INVALID_HANDLE_VALUE) {
        do {
            FileSystemEntry entry;
            entry.name = findData.cFileName;
            entry.type = (findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) ? "Directory" : "File";
            entry.parentDirectory = directory;
            entry.sizeKB = findData.nFileSizeLow / 1024;

            HANDLE hFile = CreateFileA((directory + "\\" + findData.cFileName).c_str(), GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
            if (hFile != INVALID_HANDLE_VALUE) {
                FILETIME creationTime, lastAccessTime, lastWriteTime;
                if (GetFileTime(hFile, &creationTime, &lastAccessTime, &lastWriteTime)) {
                    entry.creationTime = creationTime;
                    entry.lastAccessTime = lastAccessTime;
                    entry.lastWriteTime = lastWriteTime;
                }
                CloseHandle(hFile);
            }

            entries.push_back(entry);
        } while (FindNextFileA(hFind, &findData));

        FindClose(hFind);
    }
}

int main() {
    std::string directory = "Drive Letter:\\";
    std::vector<FileSystemEntry> entries;

    listFiles(directory, entries);

    for (const auto& entry : entries) {
        std::cout << "Name: " << entry.name << std::endl;
        std::cout << "Type: " << entry.type << std::endl;
        std::cout << "Parent Directory: " << entry.parentDirectory << std::endl;
        std::cout << "Size (KB): " << entry.sizeKB << std::endl;

        // Access the file times
        FILETIME creationTime = entry.creationTime;
        FILETIME lastAccessTime = entry.lastAccessTime;
        FILETIME lastWriteTime = entry.lastWriteTime;

        // Convert FILETIME to SYSTEMTIME for easier display
        SYSTEMTIME creationSystemTime, lastAccessSystemTime, lastWriteSystemTime;
        FileTimeToSystemTime(&creationTime, &creationSystemTime);
        FileTimeToSystemTime(&lastAccessTime, &lastAccessSystemTime);
        FileTimeToSystemTime(&lastWriteTime, &lastWriteSystemTime);

        std::cout << "Creation Time: " << creationSystemTime.wYear << "-" << creationSystemTime.wMonth << "-" << creationSystemTime.wDay << " " << creationSystemTime.wHour << ":" << creationSystemTime.wMinute << ":" << creationSystemTime.wSecond << std::endl;
        std::cout << "Last Access Time: " << lastAccessSystemTime.wYear << "-" << lastAccessSystemTime.wMonth << "-" << lastAccessSystemTime.wDay << " " << lastAccessSystemTime.wHour << ":" << lastAccessSystemTime.wMinute << ":" << lastAccessSystemTime.wSecond << std::endl;
        std::cout << "Last Write Time: " << lastWriteSystemTime.wYear << "-" << lastWriteSystemTime.wMonth << "-" << lastWriteSystemTime.wDay << " " << lastWriteSystemTime.wHour << ":" << lastWriteSystemTime.wMinute << ":" << lastWriteSystemTime.wSecond << std::endl;

        std::cout << std::endl;
    }

    return 0;
}
